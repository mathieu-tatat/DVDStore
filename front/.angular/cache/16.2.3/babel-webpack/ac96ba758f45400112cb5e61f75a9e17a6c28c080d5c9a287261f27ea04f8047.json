{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {}\n  login(username, password) {\n    // Effectuez votre logique d'authentification et obtenez le JWT\n    const token = 'votre_jwt_obtenu';\n    // Stockez le JWT en local storage\n    localStorage.setItem('token', token);\n  }\n  logout() {\n    // Supprimez le JWT du local storage lors de la déconnexion\n    localStorage.removeItem('token');\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","login","username","password","token","localStorage","setItem","logout","removeItem","factory","ɵfac","providedIn"],"sources":["/Users/mathieutatat/IdeaProjects/DVDStore/front/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor() { }\n  login(username: string, password: string): void {\n    // Effectuez votre logique d'authentification et obtenez le JWT\n    const token = 'votre_jwt_obtenu';\n\n    // Stockez le JWT en local storage\n    localStorage.setItem('token', token);\n  }\n\n  logout(): void {\n    // Supprimez le JWT du local storage lors de la déconnexion\n    localStorage.removeItem('token');\n  }\n}\n\n"],"mappings":";;AAKA,OAAM,MAAOA,WAAW;EAEtBC,YAAA,GAAgB;EAChBC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,MAAMC,KAAK,GAAG,kBAAkB;IAEhC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEAG,MAAMA,CAAA;IACJ;IACAF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;EAClC;;SAdWT,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAU,OAAA,EAAXV,MAAW,CAAAW,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}