{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NewdvdService {\n  constructor(http) {\n    this.http = http;\n  }\n  getDvdById(id) {\n    return this.http.get(`http://localhost:80/dvds/${id}`);\n  }\n  addOrUpdate(dvd) {\n    if (dvd.id) {\n      return this.update(dvd);\n    } else {\n      return this.add(dvd);\n    }\n  }\n  add(newDvd) {\n    return this.http.post(`http://localhost:80/dvds`, newDvd);\n  }\n  update(dvd) {\n    return this.http.put(`http://localhost:80/dvds/${dvd.id}`, dvd);\n  }\n  delete(id) {\n    return this.http.delete(`http://localhost:80/dvds/delete/${id}`);\n  }\n}\n_class = NewdvdService;\n_class.ɵfac = function NewdvdService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["NewdvdService","constructor","http","getDvdById","id","get","addOrUpdate","dvd","update","add","newDvd","post","put","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mathieutatat/IdeaProjects/DVDStore/front/src/app/services/newdvd.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n\nexport interface DvdGetDto{\n  name : string,\n  genre : string,\n  quantity : number,\n  prix: number;\n  photo: string;\n  description: string;\n  pathPhoto: string | undefined;\n  id? : number,\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewdvdService {\n\n  constructor(private http: HttpClient) { }\n\n  getDvdById(id: number): Observable<DvdGetDto>{\n    return this.http.get<DvdGetDto>(`http://localhost:80/dvds/${id}`);\n  }\n\n  addOrUpdate(dvd: DvdGetDto): Observable<DvdGetDto>{\n    if (dvd.id){\n      return this.update(dvd);\n    } else {\n      return this.add(dvd);\n    }\n  }\n\n  add(newDvd: DvdGetDto): Observable<DvdGetDto>{\n    return this.http.post(`http://localhost:80/dvds`, newDvd ) as Observable<DvdGetDto>;\n  }\n\n  private update(dvd: DvdGetDto ): Observable<DvdGetDto>{ \n    return this.http.put(`http://localhost:80/dvds/${dvd.id}`, dvd)as Observable<DvdGetDto>;\n  }\n\n  delete(id: number): Observable<DvdGetDto[]>{\n    return this.http.delete<DvdGetDto[]>(`http://localhost:80/dvds/delete/${id}`);\n  }\n}\n"],"mappings":";;;AAmBA,OAAM,MAAOA,aAAa;EAExBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,4BAA4BD,EAAE,EAAE,CAAC;EACnE;EAEAE,WAAWA,CAACC,GAAc;IACxB,IAAIA,GAAG,CAACH,EAAE,EAAC;MACT,OAAO,IAAI,CAACI,MAAM,CAACD,GAAG,CAAC;KACxB,MAAM;MACL,OAAO,IAAI,CAACE,GAAG,CAACF,GAAG,CAAC;;EAExB;EAEAE,GAAGA,CAACC,MAAiB;IACnB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,0BAA0B,EAAED,MAAM,CAA2B;EACrF;EAEQF,MAAMA,CAACD,GAAc;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAC,4BAA4BL,GAAG,CAACH,EAAE,EAAE,EAAEG,GAAG,CAAyB;EACzF;EAEAM,MAAMA,CAACT,EAAU;IACf,OAAO,IAAI,CAACF,IAAI,CAACW,MAAM,CAAc,mCAAmCT,EAAE,EAAE,CAAC;EAC/E;;SA1BWJ,aAAa;;mBAAbA,MAAa,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAbjB,MAAa;EAAAkB,OAAA,EAAblB,MAAa,CAAAmB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}