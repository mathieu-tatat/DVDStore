{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.JWT_TOKEN_KEY = 'token';\n  }\n  setToken(token) {\n    sessionStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem(this.JWT_TOKEN_KEY);\n  }\n  addTokenToHeader(headers) {\n    const token = this.getToken();\n    if (token) {\n      return {\n        ...headers,\n        Authorization: `Bearer ${token}`\n      };\n    }\n    return headers;\n  }\n  send(user) {\n    return this.http.post(`http://localhost:80/authorize`, user);\n    console.log(user);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","http","JWT_TOKEN_KEY","setToken","token","sessionStorage","setItem","getToken","localStorage","getItem","addTokenToHeader","headers","Authorization","send","user","post","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mathieutatat/IdeaProjects/DVDStore/front/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface AuthRequestDto{\n  username: string;\n  password: string;\n\n}\n\nexport interface AuthResponseDto{\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly JWT_TOKEN_KEY = 'token';\n\n  constructor(private http: HttpClient) { }\n\n  setToken(token: string): void{\n    sessionStorage.setItem('token', token);\n  }\n  getToken(): string | null{\n    return localStorage.getItem(this.JWT_TOKEN_KEY);\n  }\n  addTokenToHeader(headers: any): any{\n    const token = this.getToken();\n    if(token){\n      return {...headers, Authorization: `Bearer ${token}`};\n    }\n    return headers;\n  }\n  send(user: AuthRequestDto): Observable<AuthRequestDto>{\n    return this.http.post(`http://localhost:80/authorize`, user) as Observable<AuthRequestDto>;    \n    console.log(user);\n  }\n\n}\n\n"],"mappings":";;;AAiBA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,aAAa,GAAG,OAAO;EAEA;EAExCC,QAAQA,CAACC,KAAa;IACpBC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACxC;EACAG,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACP,aAAa,CAAC;EACjD;EACAQ,gBAAgBA,CAACC,OAAY;IAC3B,MAAMP,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAGH,KAAK,EAAC;MACP,OAAO;QAAC,GAAGO,OAAO;QAAEC,aAAa,EAAE,UAAUR,KAAK;MAAE,CAAC;;IAEvD,OAAOO,OAAO;EAChB;EACAE,IAAIA,CAACC,IAAoB;IACvB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,+BAA+B,EAAED,IAAI,CAA+B;IAC1FE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACnB;;SArBWf,WAAW;;mBAAXA,MAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXtB,MAAW;EAAAuB,OAAA,EAAXvB,MAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}